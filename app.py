import streamlit as st
from datetime import datetime, time, timedelta
import pandas as pd
import random

# Importa as suas l√≥gicas e DB
from database import get_session, salvar_agendamento, buscar_agendamentos_hoje, Agendamento
from logica_negocio import gerar_token_unico, horario_esta_disponivel, processar_cancelamento_seguro, get_relatorio_no_show

# Inicializa o DB
iniciar_db = st.cache_resource(lambda: get_session())() # Cache do DB
# A chamada de iniciar_db() no cache_resource garante que o arquivo agenda.db seja criado.


# --- Configura√ß√£o ---
st.set_page_config(layout="wide", page_title="Agenda Fit - Agendamento Inteligente")
PROFISSIONAIS = ["Dr. Jo√£o (F√≠sio)", "Dra. Maria (Pilates)", "Dr. Pedro (Nutri√ß√£o)"]


# --- L√≥gica de Roteamento Simples ---
page = st.query_params.get("page", "admin")
token_param = st.query_params.get("token", None)

# --- FUN√á√ïES DE RENDERIZA√á√ÉO ---

def render_agendamento_seguro():
    """Renderiza a tela de cancelamento/remarca√ß√£o via token (M√≥dulo I - Cliente)."""
    st.title("üîí Gest√£o do seu Agendamento")
    
    # Usa a sess√£o do DB
    session = get_session() 
    agendamento = buscar_agendamento_por_token(session, token_param)
    
    if agendamento and agendamento.status == "Confirmado":
        st.info(f"Seu agendamento com {agendamento.profissional} est√° CONFIRMADO para:")
        st.subheader(f"{agendamento.horario.strftime('%d/%m/%Y')} √†s {agendamento.horario.strftime('%H:%M')}")
        st.caption(f"Status Atual: {agendamento.status}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚ùå CANCELAR AGENDAMENTO", use_container_width=True, type="primary"):
                # Chama a l√≥gica de seguran√ßa do logica_negocio.py
                if processar_cancelamento_seguro(token_param):
                    st.success("Agendamento cancelado com sucesso. O hor√°rio foi liberado para outro cliente.")
                    st.balloons()
                else:
                    st.error("Erro ao cancelar. Tente novamente ou contate o profissional.")

        with col2:
             # A remarca√ß√£o exige mais l√≥gica de UI, por isso fica desabilitada no MVP
             st.button("üîÑ REMARCAR (Em Breve)", use_container_width=True, disabled=True)
             
    elif agendamento and agendamento.status != "Confirmado":
        st.warning(f"Este agendamento j√° est√°: {agendamento.status}.")
    else:
        st.error("Link inv√°lido ou agendamento n√£o encontrado.")
        
    session.close()


def render_backoffice_admin():
    """Renderiza a tela de gest√£o do profissional (M√≥dulo II - Admin)."""
    
    # --- Login simples para MVP ---
    st.sidebar.header("Login (Admin)")
    senha = st.sidebar.text_input("Senha", type="password")
    if senha != "1234":
        st.warning("Acesso restrito ao profissional. Senha de teste: 1234")
        return
    st.sidebar.success("Login como Administrador")

    # --- Navega√ß√£o do Admin ---
    tab1, tab2, tab3 = st.tabs(["Agenda Hoje/Manual", "Relat√≥rios e Faltas", "Configura√ß√£o (Pacotes)"])

    # --- TAB 1: Agendamento Manual e Agenda do Dia ---
    with tab1:
        st.header("üìù Agendamento R√°pido e Manual")
        
        with st.form("admin_form"):
            col1, col2, col3 = st.columns(3)
            with col1:
                cliente = st.text_input("Nome do Cliente:", key="c_nome")
                telefone = st.text_input("Telefone (para link gest√£o):", key="c_tel")
            with col2:
                profissional = st.selectbox("Profissional:", PROFISSIONAIS, key="c_prof")
                data_consulta = st.date_input("Data:", datetime.today(), key="c_data")
            with col3:
                hora_consulta = st.time_input("Hora:", time(9, 0), step=1800, key="c_hora") # Intervalo de 30min
                submitted = st.form_submit_button("AGENDAR NOVA SESS√ÉO", type="primary")

            if submitted and cliente:
                dt_consulta = datetime.combine(data_consulta, hora_consulta)
                session = get_session()
                
                if horario_esta_disponivel(session, profissional, dt_consulta):
                    token = gerar_token_unico()
                    dados = {'profissional': profissional, 'cliente': cliente, 'telefone': telefone, 'horario': dt_consulta}
                    salvar_agendamento(session, dados, token)
                    st.success(f"Consulta agendada para {cliente}. Token: {token}")
                    st.info(f"Link de Gest√£o: {st.experimental_get_query_params().get('url', [''])[0]}?token={token}")
                else:
                    st.error("Hor√°rio j√° ocupado ou conflito na agenda. Tente outro.")
                session.close()

        st.subheader("Agenda de Hoje")
        session = get_session()
        agenda_hoje = buscar_agendamentos_hoje(session)
        session.close()
        
        if agenda_hoje:
            df_agenda = pd.DataFrame([
                {'Hora': item.horario.strftime('%H:%M'), 
                 'Cliente': item.cliente, 
                 'Profissional': item.profissional, 
                 'Status': item.status} 
                for item in agenda_hoje
            ])
            st.dataframe(df_agenda, use_container_width=True, hide_index=True)
        else:
            st.info("Nenhuma consulta confirmada para hoje.")

    # --- TAB 2: Relat√≥rios e Faltas (O Poder do Python/Pandas) ---
    with tab2:
        st.header("üìà Relat√≥rios: Redu√ß√£o de Faltas (No-Show)")
        
        # Chama a fun√ß√£o de alto valor do logica_negocio.py
        df_relatorio = get_relatorio_no_show()
        
        if not df_relatorio.empty:
            st.subheader("Taxa de No-Show por Profissional")
            # Exibi√ß√£o do KPI (M√©trica principal)
            col1, col2 = st.columns(2)
            col1.metric("Taxa M√©dia de No-Show", f"{df_relatorio['total_no_show'].sum() / df_relatorio['total_atendimentos'].sum():.2%}")
            col2.metric("Total de Faltas Registradas", df_relatorio['total_no_show'].sum())

            # Exibi√ß√£o do ranking por profissional
            st.dataframe(df_relatorio.rename(columns={
                'total_atendimentos': 'Total Sess√µes', 
                'total_no_show': 'Faltas', 
                'Taxa No-Show (%)': 'Taxa de Falta (%)'
            }), use_container_width=True, hide_index=True)

            # Otimiza√ß√£o: Gr√°fico para visualizar a dor
            st.bar_chart(df_relatorio.set_index('profissional')['Taxa No-Show (%)'])
        else:
            st.info("Ainda n√£o h√° dados suficientes para gerar relat√≥rios.")


    # --- TAB 3: Configura√ß√£o e Pacotes (Futuro) ---
    with tab3:
        st.header("‚öôÔ∏è Gest√£o de Pacotes (MVP Simples)")
        st.info("Neste MVP, estamos focando no agendamento. O pr√≥ximo passo ser√° a gest√£o completa de cr√©ditos de sess√µes.")
        st.markdown("""
        **Pr√≥ximos Passos (Fun√ß√µes a Adicionar):**
        1.  Formul√°rio para registrar a compra de um **Pacote (10 sess√µes)**.
        2.  L√≥gica Python para consumir 1 cr√©dito a cada sess√£o 'Finalizada'.
        3.  Alerta (via l√≥gica Python) quando o cliente estiver na **√∫ltima sess√£o** para renova√ß√£o.
        """)

# --- RENDERIZA√á√ÉO PRINCIPAL ---

# 1. Se o par√¢metro 'token' existir na URL, renderiza a tela segura do cliente.
if token_param:
    render_agendamento_seguro()

# 2. Se o par√¢metro for 'admin' (ou padr√£o), renderiza o backoffice.
else:
    render_backoffice_admin()